import pytest
from faberg_easter_eggs_crush_utilitary import FabergEasterEggsCrushUtilitary

MAX_SKYSCRAPPER_HEIGHT_WITH_DETERMINABLE_TARGET_FLOOR_TEST_CASES = [
    (0, 14, 0),
    (2, 0, 0),
    (2, 14, 105),
    (7, 20, 137979),
    (7, 500, 1507386560013475),
    (237, 500, int(
        '431322842186730691997112653891062105065260343258332219390917925258990'
        '318721206767477889789852729810256244129132212314387344900067338552484'
        '172804802659'
    )),
    (477, 500, int(
        '327339060789614187001318969682759915221664204604306478948329136809613'
        '379640467455488327009232590415715088668412742095986665893957843642534'
        '2102468327399'
    )),
    (477, 10000, int(
        '600461396604105297697414530102187796624607351959572356167325648574309'
        '381899274255809992726647041509608874296502550889633566626669839693460'
        '163703754386982346596293491455058459167135769401101845748849154474806'
        '919582238098292865002615140455747337045606515913175800206705264197158'
        '348258877027342824497813598887212567460615138259041983561196905824547'
        '148562128771846272230901329804068790524523450526723439711852711480043'
        '539388255029594388405065227411436195811544328549172691557810516507323'
        '615400468586962803403389031164507526999175383227883564967859574994520'
        '910983381843074859047295120948531800868902878466257920126328541103471'
        '268056861774184467685136934882998123768531695075047132113902537018783'
        '846627502099156246969377215926174782697180458326177412430190794351610'
        '099943109019040476655865297322723014683870220977314898596096355345407'
        '775'
    )),
    (4477, 10000, int(
        '132282165480043958958362460783673098890434898963518448383867531598986'
        '301446610536891751685478817341269711783841357215435802013636135258922'
        '365500430928400233135664512630844404554829356654348203513076687636277'
        '018675440717200475866581185348955442555505364390884535822565807840088'
        '089742045861336153723069234714502993714646844975235030158296631888123'
        '604144834669786430893604180797384857581596102095797384192543039488903'
        '091076130766882122825514732301232172650430407690291246370210895666979'
        '556666130346976640841134644736944190060141654988976854541583580870310'
        '263418763640861686278862822096833630208040597829146161569051733330033'
        '802642720902333874457679679671191692155311736779980581826237238344002'
        '789515853502753821936812841520188432835524919456041295973508536809972'
        '671981258720983212512170646785644821946700147884195739866131194863075'
        '286681723589166849137124631442317209324185580198646221376427247207770'
        '409073744958601495220720040248811580648003639125878802505871292776180'
        '949460774719059354425249802496531365447551175339728855057236419375101'
        '669875112438543205985561873861077040549596562807672960504037976149068'
        '088744675174289383821710955533241036775494196964118801410336485346455'
        '386660514928478937335028427847570295200272021939674466514271973989070'
        '930670223098977340306383322314272215386675307226085657738271494101797'
        '837151634945498620141428272236139105191654258955101602319073049704139'
        '084624343570314232465699067368859713196146943280455924465657340397284'
        '554714055116138822716331160043464913167217432956685925764029434741325'
        '050468974035612299314171401876382453699575639455447305376488565521785'
        '091982548411045682371801793627992631267644407537251329512164300552250'
        '799009361468839732408715867228556426546196072504840964463235656281328'
        '231189262131699061779130594995247464497323156318180291255178886658739'
        '292296234485192268068812134150649986048583738680196886099505205523614'
        '994625016475371476569265249921174986428050519101285911480750206798991'
        '020594351321811646492002985871330864621299660558223914594718597113879'
        '193710576376701736932725032337249020931230340704466314029157927698272'
        '968041822991714874073481924090204863012031709198365164406317372296055'
        '597862849758782342237549310757974277555092243378806718523945179838880'
        '941415883703765358932525902378040991406953303970545049617664716989101'
        '369781333758807553511214097018760780391538462262752292582260874276654'
        '920371274704175389103875404769604903786148395183751337532274246458005'
        '930944066992194168890994678931983578770944592535988411400220338805759'
        '095962034087470047292697247243792880695610591602204867733395250617544'
        '251314699461115525959422031291408006699880411385942878210380912799685'
        '158905442805185485431879950848353180389751700793534954915287001140706'
        '462101708213513802075046169619284120027298419329805750796010367053816'
        '762686392146026800972532942776345234783882860230181412140810240954997'
        '899143625216861714284211121590036872606016692615869866447861291612592'
        '347926004183753825928993045992849156000903405991226525338780441261135'
        '7982786191578331327'
    )),
    (9477, 10000, int(
        '199506311688075838488374216268358508382349683188619245485200894985294'
        '388302219466319199616840361945978993311294232091242715564913494137811'
        '175937859320963239578557300467937945267652465512660598955205500869181'
        '933115425086084606181046855090748660896248880904898948380092539416332'
        '578506215683094739025569123880652250966438744410467598716269854532228'
        '685381616943157756296407628368807607322285350916414761839563814589694'
        '638994108409605362678210646214273333940365255656495306031426802349694'
        '003359343166514592977732796657756061725820314079941981796073782456837'
        '622800373028854872519008344645814546505579296014148339216157345881392'
        '570953797691192778008269577356744441230620187578363255027283237892707'
        '103738028663930314281332414016241956716905740614196543423246388012488'
        '561473052074319922596117962501309928602417083408076059323201612684922'
        '884962558413128440615367389514871142563151110897455142033138202029316'
        '409575964647560104058458415660720449628670165150619206310041864222759'
        '086709005746064178569519114560550682512504060075198422618980592371180'
        '544447880729063952425483392219827074044731623767608466130337787060398'
        '034131971334936546227005631699374555082417809728109832913144035718775'
        '247685098572769379264332215993998768866608083688378380276432827751722'
        '736575727447841122943897338108616074232532919748131201976041782819656'
        '974758981645312584341359598627841301281854062834766490886905210475808'
        '826158239619857701224070443305830758690393196046034049731565832086721'
        '059133009037528234155397453943977152574552905102123109473216107534748'
        '257407752739863482984983407569379556466386218745694992790165721037013'
        '644331358172143117913982229838458473344402709641828510050729277483645'
        '505786345011008529878123894739286995408343461588070439591189858151457'
        '791771436196987281314594837832020814749821718580113890712282509058268'
        '174362205774759214176537156877256149045829049924610286300815355833081'
        '301019876758562343435389554091756234008448875261626435686488335194637'
        '203772932400944562469232543504006780272738377553764067268986362410374'
        '914109667185570507590981002467898801782719259533812824219540283027594'
        '084489550146766683896979968862416363133763939033734536470521033494699'
        '280769542499801543455441960497201104418809569395716533031259650151352'
        '109438214183263012637477558499153903118496006204058391848066965740116'
        '387712238766843083935461543570078791971762785770108977768715092933122'
        '714463083259152074116835811628648775650998318281009662852158171828614'
        '222999167212144615583090481735090387001441410929356271067299623058736'
        '038309381606539418756332546492084862475410630944545000076661444265898'
        '659044029441005654342521616414540595744489590593784690348436940652519'
        '753396364521282427376790861695403651612611037813018425887181517759521'
        '244936929012753512804535668290997304117426074157036609128899968933922'
        '816664099129139343774891426887842353439540494690433331208972488620805'
        '309371859072768855840722547923455337815177531513208181025079503071945'
        '162015474124959831456142524021378338539846590775435423766990082771886'
        '50448599930163536123001047126485885945475644'
    ))
]  # each tuple consists of (eggs, tries, expected_return)


@pytest.mark.timeout(12)
@pytest.mark.parametrize(
    'eggs, tries, expected_return', [
        pytest.param(eg, t, exp, id='{}, {}'.format(eg, t)) for eg, t, exp in
        MAX_SKYSCRAPPER_HEIGHT_WITH_DETERMINABLE_TARGET_FLOOR_TEST_CASES
    ]
)
def test_max_skyscrapper_height_with_determinable_target_floor(
        eggs, tries, expected_return):
    assert FabergEasterEggsCrushUtilitary.\
        max_skyscrapper_height_with_determinable_target_floor(eggs, tries) == \
        expected_return
